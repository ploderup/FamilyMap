package Model;
import static java.util.UUID.randomUUID;

public class Person {
// Constructors
    /**
     * DEFAULT CONSTRUCTOR:
     * Constructs an Person object.
     */
    public Person() {}

    /**
     * PRIMARY CONSTRUCTOR:
     * Completely parameterized constructor.
     *
     * @param pi, unique person id
     * @param dt, username of user to which this person belongs
     * @param fn, first name
     * @param ln, last name
     * @param gr, gender
     * @param fr, ID of father
     * @param mr, ID of mother
     * @param sp, ID of spouse
     */
    public Person(String pi, String dt, String fn, String ln, String gr, String fr, String mr,
                  String sp) {
        personID    = pi;
        descendant  = dt;
        firstName   = fn;
        lastName    = ln;
        gender      = gr;
        father      = fr;
        mother      = mr;
        spouse      = sp;
    }

    /**
     * FAMILY-LESS CONSTRUCTOR:
     * Constructs a person without father, mother or spouse. The person's ID is generated by the
     * constructor; all other IDs are set to null.
     *
     * @param dt, username of user to which this person belongs
     * @param fn, first name
     * @param ln, last name
     * @param gr, gender
     */
    public Person(String dt, String fn, String ln, String gr) {
        personID    = randomUUID().toString();
        descendant  = dt;
        firstName   = fn;
        lastName    = ln;
        gender      = gr;
        father      = null;
        mother      = null;
        spouse      = null;
    }


// METHODS
    /**
     * MEMBERS VALID:
     * Checks whether the members of the person object are valid. Note, this function does not check
     * for ID "uniqueness".
     *
     * @return whether the members of the class are valid or not
     */
    public boolean membersValid() {
        // test members
        if(personID == null || personID.equals("")) return false;
        if(descendant == null || descendant.equals("")) return false;
        if(firstName == null || firstName.equals("")) return false;
        if(lastName == null || lastName.equals("")) return false;
        if(gender == null || !gender.equals("m") && !gender.equals("f")) return false;
        if(father != null) if(father.equals("")) return false;
        if(mother != null) if(mother.equals("")) return false;
        if(spouse != null) if(spouse.equals("")) return false;

        // tests passed
        return true;
    }


// Class Members
    /**
     * PERSON ID:
     * A unique person identifier.
     */
    private String personID;
    public String getPersonID() { return personID; }
    public void setPersonID(String id) { personID = id; }

    /**
     * DESCENDANT'S ID:
     * The ID of the user to which this person belongs.
     */
    private String descendant;
    public String getDescendant() { return descendant; }
    public void setDescendant(String dt) { descendant = dt; }

    /**
     * FIRST NAME:
     * A non-empty string.
     */
    private String firstName;
    public String getFirstName() { return firstName; }
    public void setFirstName(String fn) { firstName = fn; }

    /**
     * LAST NAME:
     * A non-empty string.
     */
    private String lastName;
    public String getLastName() { return lastName; }
    public void setLastName(String ln) { lastName = ln; }

    /**
     * Concatenates the first name of the person with its last name.
     * @return firstName + " " + lastName
     */
    public String getFullName() { return firstName + " " + lastName; }

    /**
     * GENDER:
     * A non-empty string; either "m" or "f".
     */
    private String gender;
    public String getGender() { return gender; }
    public void setGender(String gr) { gender = gr; }

    /**
     * FATHER'S ID:
     * A non-empty but potentially null string.
     */
    private String father;
    public String getFatherID() { return father; }
    public void setFatherID(String id) { father = id; }

    /**
     * MOTHER'S ID:
     * A non-empty but potentially null string.
     */
    private String mother;
    public String getMotherID() { return mother; }
    public void setMotherID(String id) { mother = id; }

    /**
     * SPOUSE'S ID:
     * A non-empty but potentially null string.
     */
    private String spouse;
    public String getSpouseID() { return spouse; }
    public void setSpouseID(String id) { spouse = id; }
}

