package Model;
import org.ibex.nestedvm.util.Sort;

import java.util.Calendar;

import static java.lang.Math.abs;
import static java.util.UUID.randomUUID;

public class Event implements Comparable<Event> {
// Constructors
    /**
     * DEFAULT CONSTRUCTOR:
     * Constructs an Event object.
     */
    public Event() {}

    /**
     * TP CONSTRUCTOR:
     * Constructs an Event object.
     *
     * @param ei, unique identifier for this event
     * @param pi, id of the person associated with the event
     * @param dt, user to which this person belongs
     * @param la, latitude of the location of the event
     * @param lo, longitude of the location of the event
     * @param co, country in which the event transpired
     * @param ci, city at which the event transpired
     * @param tp, event type (birth, baptism, etcetera...)
     * @param yr, year in which the event transpired
     */
    public Event(String ei, String dt, String pi, Double la, Double lo, String co, String ci,
                 String tp, int yr) {
        eventID = ei;
        descendant = dt;
        personID = pi;
        latitude = la;
        longitude = lo;
        country = co;
        city = ci;
        eventType = tp;
        year = yr;
    }

    /**
     * SIMPLIFIED CONSTRUCTOR:
     * Constructs an Event object without a given event ID (the ID is generated by the constructor).
     */
    public Event(String dt, String pi, Location lc, String tp, int yr) {
        eventID = randomUUID().toString();
        descendant = dt;
        personID = pi;
        latitude = lc.getLatitude();
        longitude = lc.getLongitude();
        country = lc.getCountry();
        city = lc.getCity();
        eventType = tp;
        year = yr;
    }


// Class Methods
    @Override
    public int compareTo(Event compare_var) {
        // Is one of the two a birth event?
        if (this.getEventType().equalsIgnoreCase("birth")) {
            if (compare_var.getEventType().equalsIgnoreCase("birth")) return 0; else return -1;
        } else if (compare_var.getEventType().equalsIgnoreCase("birth")) {
            return 1;
        }

        // Is one of the two a death event?
        if (this.getEventType().equalsIgnoreCase("death")) {
            if (compare_var.getEventType().equalsIgnoreCase("death")) return 0; else return 1;
        } else if (compare_var.getEventType().equalsIgnoreCase("death")) {
            return -1;
        }

        // Do both of the events have valid years?
        if (this.getYear() > 0 && compare_var.getYear() > 0) {
            // Is one year greater than the other?
            if (this.getYear() < compare_var.getYear())
                return -1;
            else if (this.getYear() > compare_var.getYear())
                return 1;

        // One of the events does not have a valid year, the other does
        } else if (this.getYear() > 0 || compare_var.getYear() > 0) {
            if (this.getYear() > 0) return -1; else return 1;
        }

        // Neither of the events have valid years; compare types lexicographically
        return this.getEventType().compareToIgnoreCase(compare_var.getEventType());
    }

    /**
     * MEMBERS VALID:
     * Checks whether current members are valid or not (does not check for uniqueness of IDs).
     *
     * @return boolean denoting result
     */
    public boolean membersValid() {
        // declarations
        final double MAX_LATITUDE = 90;
        final double MAX_LONGITUDE = 180;
        final int CURRENT_YEAR = Calendar.getInstance().get(Calendar.YEAR);

        // check members
        if(eventID == null || eventID.equals("")) return false;
        if(personID == null || personID.equals("")) return false;
        if(descendant == null || descendant.equals("")) return false;
        if(abs(latitude) > MAX_LATITUDE) return false;
        if(abs(longitude) > MAX_LONGITUDE) return false;
        if(country == null || country.equals("")) return false;
        if(city == null || city.equals("")) return false;
        if(eventType == null || eventType.equals("")) return false;
        if(year > CURRENT_YEAR || year < 0) return false;

        // tests passed
        return true;
    }

// Class Members
    /**
     * EVENT ID:
     * A unique identifier for the event. Cannot be null.
     */
    private String eventID;
    public String getEventID() { return eventID; }
    public void setEventID(String ed) { eventID = ed; }

    /**
     * DESCENDANT ID:
     * The username of the user to which the person (see personID) belongs. Cannot be null.
     */
    private String descendant;
    public String getDescendant() { return descendant; }
    public void setDescendant(String dt) { descendant = dt; }

    /**
     * PERSON ID:
     * The identifier of the person with which this event is associated. Cannot be null.
     */
    private String personID;
    public String getPersonID() { return personID; }
    public void setPersonID(String pd) { personID = pd; }

    /**
     * LATITUDE:
     * A double.
     */
    private Double latitude;
    public Double getLatitude() { return latitude; }
    public void setLatitude(Double la) { latitude = la; }

    /**
     * LONGITUDE:
     * A double.
     */
    private Double longitude;
    public Double getLongitude() { return longitude; }
    public void setLongitude(Double lo) { longitude = lo; }

    /**
     * COUNTRY:
     * A non-empty string.
     */
    private String country;
    public String getCountry() { return country; }
    public void setCountry(String co) { country = co; }

    /**
     * CITY:
     * A non-empty string.
     */
    private String city;
    public String getCity() { return city; }
    public void setCity(String ci) { city = ci; }

    /**
     * EVENT TYPE:
     * A non-empty string denoting the type of event (e.g., birth, baptism, marriage, etcetera).
     */
    private String eventType;
    public String getEventType() { return eventType; }
    public void setEventType(String tp) { eventType = tp; }

    /**
     * YEAR:
     * An integer.
     */
    private Integer year;
    public Integer getYear() { return year; }
    public void setYear(Integer yr) { year = yr; }
}


